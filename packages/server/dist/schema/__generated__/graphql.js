"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = "\ntype Address {\n  street: String\n  city: String\n  region: String\n  postalCode: String\n  country: String\n  phone: String\n}\n\ninput AddressInput {\n  street: String\n  city: String\n  region: String\n  postalCode: String\n  country: String\n  phone: String\n}\n\ntype Customer {\n  _id: ID!\n  customerID: String!\n  companyName: String\n  contactName: String\n  contactTitle: String\n  address: Address\n}\n\ntype CustomerCreatePayload {\n  record: Customer\n}\n\ninput CustomerFilterInput {\n  companyName: String\n  address: AddressInput\n}\n\ninput CustomerInput {\n  customerID: String!\n  companyName: String!\n  contactName: String\n  contactTitle: String\n  address: AddressInput\n}\n\ntype CustomerMutations {\n  create(input: CustomerInput!): CustomerCreatePayload\n}\n\nscalar Date\n\ntype Employee {\n  _id: ID!\n  employeeID: Int!\n  lastName: String\n  firstName: String\n  title: String\n  titleOfCourtesy: String\n  birthDate: Date\n  hireDate: Date\n  address: Address\n  phone: String\n  notes: String\n  reportsTo: Employee\n  reportsID: Int\n  subordinates: [Employee]!\n  territoryID: [Int]!\n}\n\ninput EmployeeFilterInput {\n  title: String\n  lastName: String\n  reportsTo: Int\n  address: AddressInput\n}\n\ntype LoginPayload {\n  token: String\n  ok: Boolean!\n  query: Query\n}\n\ntype Me {\n  user: User\n  userData: String\n  adminData: String\n}\n\ntype Mutation {\n  login(login: String!, password: String!): LoginPayload\n  logout: Boolean\n  customer: CustomerMutations\n  time: String\n}\n\ntype Order {\n  _id: Int!\n  orderID: Int\n  customerID: String\n  customer: Customer\n  employeeID: Int\n  employee: Employee\n  orderDate: Date\n  requiredDate: Date\n  shippedDate: Date\n  shipVia: Int\n  freight: Float\n  shipName: String\n  shipAddress: Address\n  details: [OrderDetails]!\n}\n\ntype OrderDetails {\n  productID: Int\n  product: Product\n  unitPrice: Float\n  quantity: Int\n  discount: Float\n}\n\ninput OrderFilterInput {\n  orderID: Int\n  customerID: String\n  employeeID: Int\n  orderDate: Date\n  requiredDate: Date\n  shippedDate: Date\n  shipVia: Int\n  freight: Float\n  shipName: String\n  shipAddress: AddressInput\n}\n\ntype OrderPagination {\n  items: [Order!]!\n  pageInfo: PaginationInfo!\n}\n\ntype PaginationInfo {\n  # Total number of pages\n  totalPages: Int!\n\n  # Total number of items\n  totalItems: Int!\n\n  # Current page number\n  page: Int!\n\n  # Number of items per page\n  perPage: Int!\n\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n}\n\ntype Product {\n  _id: ID!\n  productID: Int!\n  name: String\n  supplierID: Int\n  categoryID: Int\n  quantityPerUnit: String\n  unitPrice: Float\n  unitsInStock: Int\n  unitsOnOrder: Int\n  reorderLevel: Int\n  discontinued: Boolean\n}\n\ninput ProductFilterInput {\n  productID: Int\n  productName: String\n  supplierID: Int\n  categoryID: Int\n  quantityPerUnit: String\n  unitPrice: Float\n  unitsInStock: Int\n  unitsOnOrder: Int\n  reorderLevel: Int\n  discontinued: Boolean\n}\n\ntype Query {\n  customer(id: ID!): Customer\n  customers(filter: CustomerFilterInput, limit: Int! = 20, offset: Int): [Customer]!\n  employee(id: ID!): Employee\n  employees(filter: EmployeeFilterInput, limit: Int! = 20, offset: Int): [Employee]!\n  me: Me\n  order(id: ID!): Order\n  orders(filter: OrderFilterInput, limit: Int! = 20, offset: Int): [Order!]!\n  orderPagination(filter: OrderFilterInput, page: Int! = 1, perPage: Int! = 20): OrderPagination!\n  product(id: ID!): Product\n  products(filter: ProductFilterInput, limit: Int! = 20, offset: Int): [Product]!\n\n  # A simple type for getting started!\n  hello: String\n}\n\ntype User {\n  id: Int!\n  name: String\n  login: String\n  roles: [String]!\n}\n\n";
//# sourceMappingURL=graphql.js.map